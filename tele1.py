import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
import numpy as np

# -------------------------------
# 1. Charger les donn√©es brutes
# -------------------------------
df = pd.read_csv('avito_voitures.csv')
print(f"‚úÖ Donn√©es charg√©es : {df.shape}")
print("Colonnes :", df.columns.tolist())

# Sauvegarde initiale
df.to_csv('clean_step0_original.csv', index=False, encoding='utf-8')
print("üíæ Donn√©es originales sauvegard√©es : clean_step0_original.csv")

# -------------------------------
# 2. Supprimer colonnes inutiles
# (aucune en plus car tu as d√©j√† supprim√© url_annonce, titre_detail, prix_detail)
# -------------------------------
# On garde : titre_page_principale, prix_page_principale, Cat√©gorie, Ann√©e/Mod√®le, Bo√Æte de vitesse,
# Type de carburant, Kilom√©trage, Marque, Mod√®le, Nombre de portes, Origine, Premi√®re main, Puissance fiscale, √âtat
df = df[['titre_page_principale', 'prix_page_principale', 'Cat√©gorie', 'Ann√©e/Mod√®le', 'Bo√Æte de vitesse',
         'Type de carburant', 'Kilom√©trage', 'Marque', 'Mod√®le', 'Nombre de portes',
         'Origine', 'Premi√®re main', 'Puissance fiscale', '√âtat']]

df.to_csv('clean_step1_selected_columns.csv', index=False, encoding='utf-8')
print("üíæ Apr√®s suppression des colonnes inutiles : clean_step1_selected_columns.csv")

# -------------------------------
# 3. Nettoyage des valeurs num√©riques
# -------------------------------
# Convertir prix_page_principale et Kilom√©trage en num√©riques
df['prix_page_principale'] = df['prix_page_principale'].str.replace(r'[^\d]', '', regex=True).replace('', np.nan).astype(float)
df['Kilom√©trage'] = df['Kilom√©trage'].str.replace(r'[^\d]', '', regex=True).replace('', np.nan).astype(float)
df['Ann√©e/Mod√®le'] = pd.to_numeric(df['Ann√©e/Mod√®le'], errors='coerce')

df.to_csv('clean_step2_numeric_conversion.csv', index=False, encoding='utf-8')
print("üíæ Apr√®s conversion des colonnes num√©riques : clean_step2_numeric_conversion.csv")

# -------------------------------
# 4. Gestion des valeurs manquantes
# -------------------------------
# Imputation pour les colonnes num√©riques
num_cols = ['prix_page_principale', 'Kilom√©trage', 'Ann√©e/Mod√®le']
imputer_num = SimpleImputer(strategy='median')
df[num_cols] = imputer_num.fit_transform(df[num_cols])

# Imputation pour les colonnes cat√©gorielles
cat_cols = [col for col in df.columns if col not in num_cols]
for col in cat_cols:
    df[col].fillna('Inconnu', inplace=True)

df.to_csv('clean_step3_missing_values.csv', index=False, encoding='utf-8')
print("üíæ Apr√®s traitement des valeurs manquantes : clean_step3_missing_values.csv")

# -------------------------------
# 5. Encodage des variables cat√©gorielles (OneHot)
# -------------------------------
encoder = OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore')
encoded_data = encoder.fit_transform(df[cat_cols])
encoded_cols = encoder.get_feature_names_out(cat_cols)

df_encoded = pd.DataFrame(encoded_data, columns=encoded_cols)
df_final = pd.concat([df[num_cols].reset_index(drop=True), df_encoded.reset_index(drop=True)], axis=1)

df_final.to_csv('clean_step4_encoded.csv', index=False, encoding='utf-8')
print("üíæ Apr√®s encodage OneHot : clean_step4_encoded.csv")

# -------------------------------
# 6. Normalisation des donn√©es num√©riques
# -------------------------------
scaler = StandardScaler()
df_final[num_cols] = scaler.fit_transform(df_final[num_cols])

df_final.to_csv('clean_step5_normalized.csv', index=False, encoding='utf-8')
print("üíæ Apr√®s normalisation : clean_step5_normalized.csv")

print("‚úÖ Nettoyage termin√© !")
print(df_final.head())
